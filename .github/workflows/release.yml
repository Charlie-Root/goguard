name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Get dependencies
      run: go mod download
    
    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        if [ "${{ matrix.goos }}" = "windows" ]; then
          BINARY_NAME="goguard-${{ matrix.goos }}-${{ matrix.goarch }}.exe"
        else
          BINARY_NAME="goguard-${{ matrix.goos }}-${{ matrix.goarch }}"
        fi
        
        go build -ldflags="-s -w" -o $BINARY_NAME .
        
        # Create archive
        if [ "${{ matrix.goos }}" = "windows" ]; then
          zip "goguard-${{ matrix.goos }}-${{ matrix.goarch }}.zip" $BINARY_NAME README.md config.example.yaml
        else
          tar -czf "goguard-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz" $BINARY_NAME README.md config.example.yaml
        fi
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: goguard-${{ matrix.goos }}-${{ matrix.goarch }}
        path: |
          goguard-${{ matrix.goos }}-${{ matrix.goarch }}*
        retention-days: 1

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: ./artifacts
    
    - name: Move artifacts to release directory
      run: |
        mkdir -p release
        find ./artifacts -type f \( -name "*.tar.gz" -o -name "*.zip" \) -exec mv {} ./release/ \;
        ls -la ./release/
    
    - name: Generate changelog
      id: changelog
      run: |
        if [ -f CHANGELOG.md ]; then
          echo "Using existing CHANGELOG.md"
          CHANGELOG=$(head -n 50 CHANGELOG.md)
        else
          echo "Generating changelog from git commits"
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -n "$PREVIOUS_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s" $PREVIOUS_TAG..HEAD)
          else
            CHANGELOG=$(git log --pretty=format:"- %s" --max-count=10)
          fi
        fi
        
        # Create release notes
        cat > release_notes.md << EOF
        # GoGuard Release ${GITHUB_REF#refs/tags/}
        
        ## What's Changed
        $CHANGELOG
        
        ## Installation
        
        Download the appropriate binary for your system:
        - **Linux AMD64**: \`goguard-linux-amd64.tar.gz\`
        - **Linux ARM64**: \`goguard-linux-arm64.tar.gz\`
        - **macOS AMD64**: \`goguard-darwin-amd64.tar.gz\`
        - **macOS ARM64**: \`goguard-darwin-arm64.tar.gz\`
        - **Windows AMD64**: \`goguard-windows-amd64.zip\`
        
        Extract the archive and run:
        \`\`\`bash
        # Linux/macOS
        tar -xzf goguard-*.tar.gz
        sudo ./goguard-* --config config.example.yaml
        
        # Windows
        # Extract the zip file and run goguard.exe
        \`\`\`
        
        ## Configuration
        
        Copy \`config.example.yaml\` to \`config.yaml\` and customize for your needs.
        
        ## Documentation
        
        See the [README.md](https://github.com/${{ github.repository }}/blob/main/README.md) for full documentation.
        EOF
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: ./release/*
        body_path: release_notes.md
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max