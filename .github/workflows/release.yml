name: Build and Release GoGuard

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Get dependencies
      run: go mod download
    
    - name: Run tests
      run: go test -v ./...
    
    - name: Test build
      run: go build -o goguard-test .

  build:
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Get dependencies
      run: go mod download
    
    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        # Set version info
        VERSION=${GITHUB_REF#refs/tags/}
        COMMIT=$(git rev-parse --short HEAD)
        BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        
        # Set binary name
        if [ "${{ matrix.goos }}" = "windows" ]; then
          BINARY_NAME="goguard-${{ matrix.goos }}-${{ matrix.goarch }}.exe"
        else
          BINARY_NAME="goguard-${{ matrix.goos }}-${{ matrix.goarch }}"
        fi
        
        # Build with version info
        go build -ldflags="-s -w -X main.Version=$VERSION -X main.Commit=$COMMIT -X main.BuildTime=$BUILD_TIME" -o $BINARY_NAME .
        
        # Verify binary
        ./$BINARY_NAME -version || echo "Version check failed (expected for cross-compilation)"
        
        # Prepare files for archive
        FILES_TO_INCLUDE="$BINARY_NAME README.md"
        
        # Add config file if it exists
        if [ -f "config.yaml" ]; then
          FILES_TO_INCLUDE="$FILES_TO_INCLUDE config.yaml"
        elif [ -f "config.example.yaml" ]; then
          FILES_TO_INCLUDE="$FILES_TO_INCLUDE config.example.yaml"
        fi
        
        # Add LICENSE if it exists
        if [ -f "LICENSE" ]; then
          FILES_TO_INCLUDE="$FILES_TO_INCLUDE LICENSE"
        elif [ -f "LICENSE.md" ]; then
          FILES_TO_INCLUDE="$FILES_TO_INCLUDE LICENSE.md"
        fi
        
        # Create archive with available files
        if [ "${{ matrix.goos }}" = "windows" ]; then
          zip "goguard-${{ matrix.goos }}-${{ matrix.goarch }}.zip" $FILES_TO_INCLUDE
        else
          tar -czf "goguard-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz" $FILES_TO_INCLUDE
        fi
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: goguard-${{ matrix.goos }}-${{ matrix.goarch }}
        path: |
          goguard-${{ matrix.goos }}-${{ matrix.goarch }}*
        retention-days: 1

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
    
    - name: Move artifacts to release directory
      run: |
        mkdir -p release
        find ./artifacts -type f \( -name "*.tar.gz" -o -name "*.zip" \) -exec mv {} ./release/ \;
        ls -la ./release/
    
    - name: Generate changelog
      id: changelog
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        
        if [ -f CHANGELOG.md ]; then
          echo "Using existing CHANGELOG.md"
          CHANGELOG=$(head -n 50 CHANGELOG.md)
        else
          echo "Generating changelog from git commits"
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -n "$PREVIOUS_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s" $PREVIOUS_TAG..HEAD)
          else
            CHANGELOG=$(git log --pretty=format:"- %s" --max-count=10)
          fi
        fi
        
        # Create comprehensive release notes
        cat > release_notes.md << EOF
        # GoGuard ${VERSION} - Advanced Intrusion Detection & Response System
        
        ## 🚀 Features
        - **Real-time log monitoring** with flexible pattern matching
        - **Multiple firewall backends** (iptables, ufw, nftables, mock)
        - **Abuse reporting** to AbuseIPDB.com and AbuseDB.info
        - **Web interface** with REST API at port 8080
        - **Persistent state management** with automatic cleanup
        - **Production-ready** with comprehensive logging
        
        ## 📋 What's Changed
        $CHANGELOG
        
        ## 📦 Installation
        
        ### Quick Start
        1. Download the appropriate binary for your system
        2. Extract the archive: \`tar -xzf goguard-*.tar.gz\` (Linux/macOS) or extract zip (Windows)
        3. Copy config: \`cp config.yaml my-config.yaml\`
        4. Edit configuration for your environment
        5. Run with root privileges: \`sudo ./goguard-* -config my-config.yaml\`
        
        ### Available Downloads
        - **Linux AMD64**: \`goguard-linux-amd64.tar.gz\` (recommended for most servers)
        - **Linux ARM64**: \`goguard-linux-arm64.tar.gz\` (for ARM servers, Raspberry Pi)
        - **macOS Intel**: \`goguard-darwin-amd64.tar.gz\`
        - **macOS Apple Silicon**: \`goguard-darwin-arm64.tar.gz\`
        - **Windows**: \`goguard-windows-amd64.zip\`
        
        ## ⚙️ Configuration
        
        The included \`config.yaml\` contains:
        - Pre-configured patterns for 25+ services (Nginx, Apache, SSH, etc.)
        - Firewall auto-detection (iptables/ufw/nftables)
        - Abuse reporting setup (requires API keys)
        - Web interface configuration
        - Comprehensive whitelisting options
        
        ### Test Mode
        \`\`\`bash
        # Run with mock firewall for testing (no root required)
        ./goguard-* -config config.yaml
        \`\`\`
        
        ### Production Mode
        \`\`\`bash
        # Run with real firewall (requires root)
        sudo ./goguard-* -config config.yaml
        \`\`\`
        
        ## 🌐 Web Interface
        
        Access the dashboard at: \`http://localhost:8080\`
        - View active bans and statistics
        - Monitor real-time activity
        - REST API for integrations
        
        ## 📚 Documentation
        
        - **Full documentation**: [README.md](https://github.com/${{ github.repository }}/blob/main/README.md)
        - **Configuration guide**: See included \`config.yaml\` with detailed comments
        - **API reference**: Built-in at \`/api/stats\` and \`/health\` endpoints
        
        ## 🔧 System Requirements
        
        - Linux, macOS, or Windows
        - One of: iptables, ufw, or nftables (for production use)
        - Root/Administrator privileges (for firewall management)
        - Go 1.19+ (if building from source)
        
        ## 🆘 Support
        
        - **Issues**: Report bugs on GitHub Issues
        - **Discussions**: Use GitHub Discussions for questions
        - **Security**: Report security issues privately
        
        **Note**: This release includes comprehensive log patterns for immediate protection against common attacks. Review and customize the configuration before production deployment.
        EOF
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: ./release/*
        body_path: release_notes.md
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
        labels: |
          org.opencontainers.image.title=GoGuard
          org.opencontainers.image.description=Advanced Intrusion Detection & Response System
          org.opencontainers.image.vendor=GoGuard Project
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VERSION=${{ github.ref_name }}
          COMMIT=${{ github.sha }}
          BUILD_TIME=${{ github.run_started_at }}